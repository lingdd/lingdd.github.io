<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-30T04:21:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在你的iOS应用中添加自定义的下拉刷新控制]]></title>
    <link href="http://yoursite.com/2015/10/30/%E5%9C%A8%E4%BD%A0%E7%9A%84iOS%E5%BA%94%E7%94%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2015/10/30/在你的iOS应用中添加自定义的下拉刷新控制/</id>
    <published>2015-10-30T03:54:47.000Z</published>
    <updated>2015-10-30T04:21:00.000Z</updated>
    <content type="html"><![CDATA[<p>译自<a href="http://www.appcoda.com/custom-pull-to-refresh/" target="_blank" rel="external">Appcoda</a>，作者 <a href="http://www.appcoda.com/author/gabrielth/" target="_blank" rel="external">gabriel theodoropoulos</a></p>
<p><img src="http://7xnk7q.com1.z0.glb.clouddn.com/pull-to-refresh-featured-1024x533.jpg" alt=""></p>
<h4 id="演示应用程序">演示应用程序</h4><p>下面的动画显示的是我们在这个教程中准备实现的自定义下拉刷新控件</p>
<p><img src="http://7xnk7q.com1.z0.glb.clouddn.com/t38_1_final_sample.gif" alt=""></p>
<p>正如你所见，tableview中包含一些假的数据，因为我们这里的目的并不是从网络服务器中获取真实的数据。这里最重要的部分是在刷新过程中，菊花不会显示；相反，”APPCODE”这个词会在刷新过程中以自定义的样式显示动画效果。</p>
<p>如果你想知道假的刷新是在什么时候结束的，我能告诉你的是使用了一个timer(NSTimer)对象</p>
<h4 id="默认的下拉刷新">默认的下拉刷新</h4><p>我们在示例程序中做的第一件事就是在tableview中显示那些假数据。在你下载的启动项目中，已经有一个名为tblDemo的IBOutlet属性连接到storyboard中的tableview，所以我们需要实现必要的tableview delegate和datasource方法。然而，在我们开始之前，我们需要定义在tableview中显示的数据。因此，在ViewController.swift文件中，在类的头部，我们加上下面一行：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dataArray: <span class="type">Array</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>]</span><br></pre></td></tr></table></figure>
<p>现在，略微修改一下类的定义，增加UITableViewDelegate和UITableViewDataSource协议：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span></span></span><br></pre></td></tr></table></figure>
<p>之后，我们必须设置ViewController类的实例作为tableview的delegate和datasource。我们在viewDidLoad中加上：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">	...</span><br><span class="line">	tblDemo.delegate = <span class="keyword">self</span></span><br><span class="line">	tblDemo.datasource = <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，让我们加上剩下的tableview方法以便能够显示我们的假数据：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">numberOfSectionInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> dataArray.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">	<span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"idCell"</span>, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">UITableViewCell</span></span><br><span class="line">	cell.textLabel!.text = dataArray[indexPath.row]</span><br><span class="line">	<span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">60.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的实现中没有任何难度，如果你运行程序你会看到“One, Two, …”会在tableview中显示：</p>
<p><img src="http://7xnk7q.com1.z0.glb.clouddn.com/t38_2_tableview_data.png" alt=""></p>
<p>现在让我们集中注意力于如何显示和使用默认的下拉刷新。在这个例子中，你的类是ViewController类的一个子类，或者是其他的什么类，除了UITableViewController类。我们在类的头部定义refresh控制器。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> refreshControl: <span class="type">UIRefreshControl</span>!</span><br></pre></td></tr></table></figure>
<p>在viewDidLoad方法中，我们先初始化refresh控制器，然后我们将它加到tableview中：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> fun viewDidLoad() &#123;</span><br><span class="line">	...</span><br><span class="line">	refreshControl = <span class="type">UIRefreshControl</span>()</span><br><span class="line">	tblDemo.addSubView(refreshControl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnk7q.com1.z0.glb.clouddn.com/t38_3_default_refresh.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">	...</span><br><span class="line">	refreshControl = <span class="type">UIRefreshControl</span>()</span><br><span class="line">	</span><br><span class="line">	refreshControl.backgroundColor = <span class="type">UIColor</span>.redColor()</span><br><span class="line">	refreshControl.tintColor = <span class="type">UIColor</span>.yellowColor()</span><br><span class="line">	</span><br><span class="line">	tblDemo.addSubView(refreshControl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xnk7q.com1.z0.glb.clouddn.com/t38_4_red_yellow_refresh.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>译自<a href="http://www.appcoda.com/custom-pull-to-refresh/" target="_blank" rel="external">Appcoda</a>，作者 <a href="http://www.appcoda.com/]]>
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/10/16/hello-world/"/>
    <id>http://yoursite.com/2015/10/16/hello-world/</id>
    <published>2015-10-16T01:24:08.000Z</published>
    <updated>2015-10-16T01:24:08.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
